- sortable ||= false
- blocked_with_comment = @feature_block_with_comment && RedhopperIssue.where(issue_id: issue.id).first.try(:blocked)
- blocked_with_issues = (blockers = issue.relations_to.select {|ir| ir.relation_type == 'blocks' && !ir.issue_from.closed?}.map { |ir| ir.issue_from }).present?
- blocking_issue = issue.relations_from.detect {|ir| ir.relation_type == 'blocks' && !ir.issue_to.closed?}
- blocked = blocked_with_comment || blocked_with_issues
%li{id: "issue-#{issue.id}", draggable: sortable ? "true" : "false"}
	/
		Redmine needs a tr for its contextual menu.
		So here is the whole table packageâ€¦
	%table
		%tbody
			%tr.hascontextmenu{class: blocked ? 'blocked' : blocking_issue ? 'blocking' : '' }
				%td
					%input{type: "checkbox", name: "ids[]", value: issue.id}
					.issue-id ##{issue.id}
					- if sortable
						.sortable
							= link_to (tag :img, src: '/images/2uparrow.png', alt: t('.move2top_arrow')), move_redhopper_issue_path(issue_id: issue.id, target_issue_id: first_issue.id, insert: "before"), method: :post, title: t('.move2top') unless first_issue == issue
							- previous_issue = issue_counter == 0 ? nil : column.sorted_issues[issue_counter - 1]
							= link_to (tag :img, src: '/images/1uparrow.png', alt: t('.moveup_arrow')), move_redhopper_issue_path(issue_id: issue.id, target_issue_id: previous_issue.id, insert: "before"), method: :post, title: t('.moveup') unless previous_issue.nil?
							- next_issue = column.sorted_issues[issue_counter + 1]
							= link_to (tag :img, src: '/images/1downarrow.png', alt: t('.moveup_arrow')), move_redhopper_issue_path(issue_id: issue.id, target_issue_id: next_issue.id, insert: "after"), method: :post, title: t('.movedown') unless next_issue.nil?
							= link_to (tag :img, src: '/images/2downarrow.png', alt: t('.move2bottom_arrow')), move_redhopper_issue_path(issue_id: issue.id, target_issue_id: last_issue.id, insert: "after"), method: :post, title: t('.move2bottom') unless last_issue == issue
							- if Feature.enabled "move_back_to_unsorted"
								= link_to (tag :img, src: '/images/bullet_diamond.png', alt: t('.goto_unsorted')), delete_redhopper_issue_path(issue_id: issue.id), method: :delete, title: t('.goto_unsorted')
					- else
						.unsortable
							= link_to t('.goto_sorted'), create_redhopper_issue_path(issue_id: issue.id), method: :post
					%p= link_to issue.subject, issue
					- if @feature_block_with_comment
						- if blocked_with_issues
							- blockers.each do |blocker|
								%p.icon.icon-exclamation.blocker
									= t('.blocked_by')
									= link_to("##{blocker.id}.", blocker, title: blocker.subject)
						- if blocked_with_comment
							- journals_to_show = issue.journals.visible.where("LENGTH(journals.notes) > 0").last
							%p.icon.icon-exclamation.blocker
								= t('.blocked_by')
								= link_to t('.last_note'), issue_path(issue, anchor: "note-#{issue.journals.visible.count}"), title: journals_to_show.notes
								= link_to t('.unblock'), unblock_redhopper_issue_path(issue_id: issue.id), method: :delete
						- elsif issue.journals.count > 0
							= link_to block_redhopper_issue_path(issue_id: issue.id), method: :post, title: t('.block_with') + t('.last_note') do
								= tag :img, src: '/plugin_assets/redhopper/images/exclamation-disabled.png', alt: t('.block_with') + t('.last_note')
					- if @feature_show_due_date && (due_delta = (issue.due_before - Date.today).to_i unless issue.due_before.nil?)
						.issue-due-before{title: due_delta > 0 ? t('.on_time') : t('.overdue'),class: ("overdue" unless due_delta > 0)}= "#{due_delta.abs}" + t('.due_unit')
						.meta-data
							- if blocked && !@feature_block_with_comment
								%span.icon.icon-exclamation{title: t('.blocked_by') + "#" + blockers.map(&:id).join(', #') + '.'}= blockers.count
							- unless (notes = issue.journals.visible.where("LENGTH(journals.notes) > 0")).empty?
								%span.icon.icon-comment{title: t('.notes_count')}= notes.count
							- unless issue.attachments.empty?
								%span.icon.icon-attachment{title: t('.attachments_count')}= issue.attachments.count
							- unless issue.assigned_to.nil?
								%span.icon.icon-user{title: t('.assigned_user')}
									%abbr{title: issue.assigned_to} #{issue.assigned_to.firstname.to_s.chars.first}#{issue.assigned_to.lastname.to_s.chars.first}
							- unless issue.description.blank?
								%span.icon.icon-issue{title: t('.description')}

%hr{id: "issue-#{issue.id}-after"}
